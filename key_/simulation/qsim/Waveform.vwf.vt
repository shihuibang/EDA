// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/17/2023 19:36:47"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          key_clock
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module key_clock_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_50Mhz;
reg [3:0] key_col;
reg rst_n;
// wires                                               
wire [7:0] DIG;
wire [5:0] SEL;
wire [3:0] key_row;
wire [15:0] led;
wire [3:0] led4;

// assign statements (if any)                          
key_clock i1 (
// port map - connection between master ports and signals/registers   
	.DIG(DIG),
	.SEL(SEL),
	.clk_50Mhz(clk_50Mhz),
	.key_col(key_col),
	.key_row(key_row),
	.led(led),
	.led4(led4),
	.rst_n(rst_n)
);
initial 
begin 
#1000000 $finish;
end 

// clk_50Mhz
initial
begin
	clk_50Mhz = 1'b0;
	clk_50Mhz = #10000 1'b1;
	clk_50Mhz = #20000 1'b0;
	clk_50Mhz = #20000 1'b1;
	clk_50Mhz = #20000 1'b0;
	clk_50Mhz = #20000 1'b1;
	clk_50Mhz = #20000 1'b0;
	clk_50Mhz = #20000 1'b1;
	clk_50Mhz = #20000 1'b0;
end 
// key_col[ 3 ]
initial
begin
	key_col[3] = 1'b0;
	key_col[3] = #20000 1'b1;
	key_col[3] = #90000 1'b0;
	key_col[3] = #120000 1'b1;
	key_col[3] = #60000 1'b0;
	key_col[3] = #40000 1'b1;
	key_col[3] = #50000 1'b0;
	key_col[3] = #30000 1'b1;
	key_col[3] = #50000 1'b0;
end 
// key_col[ 2 ]
initial
begin
	key_col[2] = 1'b0;
	key_col[2] = #20000 1'b1;
	key_col[2] = #90000 1'b0;
	key_col[2] = #30000 1'b1;
	key_col[2] = #60000 1'b0;
	key_col[2] = #30000 1'b1;
	key_col[2] = #60000 1'b0;
	key_col[2] = #40000 1'b1;
	key_col[2] = #50000 1'b0;
	key_col[2] = #90000 1'b1;
	key_col[2] = #100000 1'b0;
end 
// key_col[ 1 ]
initial
begin
	key_col[1] = 1'b0;
	key_col[1] = #140000 1'b1;
	key_col[1] = #60000 1'b0;
	key_col[1] = #30000 1'b1;
	key_col[1] = #60000 1'b0;
	key_col[1] = #40000 1'b1;
	key_col[1] = #50000 1'b0;
end 
// key_col[ 0 ]
initial
begin
	key_col[0] = 1'b0;
	key_col[0] = #140000 1'b1;
	key_col[0] = #60000 1'b0;
	key_col[0] = #130000 1'b1;
	key_col[0] = #50000 1'b0;
end 

// rst_n
initial
begin
	rst_n = 1'b0;
	rst_n = #30000 1'b1;
	rst_n = #60000 1'b0;
end 
endmodule

